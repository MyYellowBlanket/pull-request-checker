package riki

import (
	"bytes"
	"encoding/base64"
	"encoding/json"
	"errors"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/tengattack/unified-ci/checks/vulnerability/common"
	"github.com/tengattack/unified-ci/util"
)

// constants
const (
	postURL = "https://riki.bilibili.co/api/bvd/package/"
	getURL  = "https://riki.bilibili.co/api/bvd/vul/"
)

var client = http.Client{
	Timeout: 5 * time.Second,
}

// error definitions
var (
	ErrNotFound = errors.New("Error not found")
)

var mapLang = map[common.Language]string{
	common.Golang: "golang",
	common.Java:   "java",
}

// Scanner implements the vulnerability.Scanner interface
type Scanner struct {
	ProjectName string
}

// CheckPackages checks the vulnerability of the packages listed in pkgFilePath file, such as "go.sum"
func (s *Scanner) CheckPackages(lang common.Language, pkgFilePath string) (bool, error) {
	if !util.FileExists(pkgFilePath) {
		return false, ErrNotFound
	}
	fileContent, err := ioutil.ReadFile(pkgFilePath)
	if err != nil {
		return false, err
	}

	data := struct {
		AppName string `json:"app_name"`
		Lang    string `json:"lang"`
		Data    string `json:"data"`
	}{
		AppName: s.ProjectName,
		Lang:    mapLang[lang],
		Data:    strings.ReplaceAll(base64.StdEncoding.EncodeToString(fileContent), "\n", ""),
	}
	body, err := json.Marshal(data)
	if err != nil {
		return false, err
	}

	req, err := http.NewRequest(http.MethodPost, postURL, bytes.NewReader(body))
	if err != nil {
		return false, err
	}
	req.Header.Add("Content-Type", "application/json")
	resp, err := client.Do(req)
	if err != nil {
		return false, err
	}
	if resp.StatusCode != http.StatusOK {
		return false, nil
	}
	return true, nil
}

// Query queries the checking result of CheckPackages
func (s *Scanner) Query() (bool, error) {
	req, err := http.NewRequest(http.MethodGet, getURL+"?app_name="+url.QueryEscape(s.ProjectName), nil)
	if err != nil {
		return false, err
	}
	resp, err := client.Do(req)
	if err != nil {
		return false, err
	}
	defer resp.Body.Close()
	data, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return false, err
	}
	var v struct {
		StatusCode int                      `json:"status_code"`
		Data       []map[string]interface{} `json:"data"`
	}
	err = json.Unmarshal(data, &v)
	if err != nil {
		return false, err
	}
	return len(v.Data) == 0, nil
}
